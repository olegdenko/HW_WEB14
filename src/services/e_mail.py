from pathlib import Path

from fastapi_mail import FastMail, MessageSchema, ConnectionConfig, MessageType
from fastapi_mail.errors import ConnectionErrors
from pydantic import EmailStr

from src.services.auth import auth_servise
from src.conf.config import settings


conf = ConnectionConfig(
    MAIL_USERNAME=settings.mail_username,
    MAIL_PASSWORD=settings.mail_password,
    MAIL_FROM=settings.mail_from,
    MAIL_PORT=settings.mail_port,
    MAIL_SERVER=settings.mail_server,
    MAIL_FROM_NAME="Denko",
    MAIL_STARTTLS=False,
    MAIL_SSL_TLS=True,
    USE_CREDENTIALS=True,
    VALIDATE_CERTS=True,
    TEMPLATE_FOLDER=Path(__file__).parent / "templates",
)


async def send_email(email: EmailStr, username: str, host: str):
    """
    The send_email function sends an email to the user with a link to confirm their email address.
        Args:
            email (str): The user's email address.
            username (str): The username of the user who is registering for an account.
            host (str): The hostname of the server where this function is being called from.
    
    :param email: EmailStr: Check if the email is valid
    :param username: str: Get the username of the user who is trying to register
    :param host: str: Create the link to your website
    :return: A coroutine object
    :doc-author: Trelent
    """
    try:
        token_verification = auth_servise.create_email_token({"sub": email})
        message = MessageSchema(
            subject="Confirm your email ",
            recipients=[email],
            template_body={
                "host": host,
                "username": username,
                "token": token_verification,
            },
            subtype=MessageType.html,
        )

        fm = FastMail(conf)
        await fm.send_message(message, template_name="email_template.html")
    except ConnectionErrors as err:
        print(err)


async def send_reset_password_email(email: str, token: str):
    """
    The send_reset_password_email function sends an email to the user with a link to reset their password.
        Args:
            email (str): The user's email address.
            token (str): A unique token generated by the server for this specific request.
    
    
    :param email: str: Send the email to a specific user
    :param token: str: Pass the token to the function
    :return: A coroutine object
    :doc-author: Trelent
    """
    subject = "Reset Password"
    host = settings.frontend_url  # TODO переробити форму урла в листі
    username = ""  # TODO Отриматb ім'я користувача
    await send_email(email, username, host, token, subject)
